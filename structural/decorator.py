"""
Декоратор — это структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность,
оборачивая их в полезные «обёртки».
Основой библиотеки является класс Notifier с методом send, который принимает на вход строку-сообщение и высылает её всем
администраторам по электронной почте. Сторонняя программа должна создать и настроить этот объект, указав кому отправлять
оповещения, а затем использовать его каждый раз, когда что-то случается.
В какой-то момент стало понятно, что одних email-оповещений пользователям мало. А также пользователя захотели получать
сообщения сразу на несколько ресурсов.
Вы попытались реализовать все возможные комбинации подклассов оповещений. Но после того как вы добавили первый десяток классов,
стало ясно, что такой подход невероятно раздувает код программы.

Декоратор имеет альтернативное название — обёртка. Оно более точно описывает суть паттерна: вы помещаете целевой объект в
другой объект-обёртку, который запускает базовое поведение объекта, а затем добавляет к результату что-то своё.

Оба объекта имеют общий интерфейс, поэтому для пользователя нет никакой разницы, с каким объектом работать — чистым или обёрнутым.
Вы можете использовать несколько разных обёрток одновременно — результат будет иметь объединённое поведение всех обёрток сразу.

В примере с оповещениями мы оставим в базовом классе простую отправку по электронной почте, а расширенные способы отправки
сделаем декораторами.
"""

